version: "3.8"

services:
  migrate:
    build: .
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_DB=${POSTGRES_DB:-myapp}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PYTHONPATH=/code
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z psql 5432; do
          sleep 1
        done &&
        echo 'Database is up!' &&
        echo 'DATABASE_URL=' $$DATABASE_URL &&
        echo 'Verifying alembic installation...' &&
        python -c 'import alembic; print(\"Alembic OK\")' &&
        echo 'Running migrations...' &&
        alembic upgrade head
      "
    depends_on:
      psql:
        condition: service_healthy
    restart: "no"

  backend:
    build: .
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB:-myapp}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - PYTHONPATH=/code
    ports:
      - "8080:8080"
    labels:
      - "coolify.managed=true"
      - "traefik.enable=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      - "traefik.http.routers.backend.rule=Host(`${FQDN}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
    depends_on:
      psql:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5

  psql:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-myapp}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - psql_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-myapp}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis/redis-stack:latest
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  psql_data:
  redis_data: